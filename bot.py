import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.filters import Command
import asyncio

from panic_parser import parse_panic_file
from db import get_error_tips

TOKEN = "7150429783:AAG_t8pbChxSEK008aCoGmvyHpjDcUQ84qk"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª panic (.ips –∞–±–æ .txt) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")

@dp.message(lambda message: message.document)
async def handle_document(message: types.Message):
    file = await bot.get_file(message.document.file_id)
    file_path = file.file_path
    file_bytes = await bot.download_file(file_path)
    file_text = file_bytes.read().decode('utf-8', errors='ignore')

    info = parse_panic_file(file_text)
    tips = get_error_tips(info["errors"])

    result = (
        f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π:\n"
        f"üì± –ú–æ–¥–µ–ª—å: {info['model']}\n"
        f"üõ†Ô∏è –í–µ—Ä—Å—ñ—è iOS: {info['ios']}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–±–æ—é: {info['date']}\n\n"
        f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É:\n"
    )
    if tips:
        for t in tips:
            result += f"- {t}\n"
    else:
        result += "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –ø–æ—Ä–∞–¥ —É –±–∞–∑—ñ."

    await message.answer(result)

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
